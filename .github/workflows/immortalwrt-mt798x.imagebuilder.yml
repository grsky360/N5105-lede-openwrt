name: Build immortalwrt-mt798x image builder
# 798最大的问题是，这个分枝基于21.02，而21.02的内核是5.4，主线的openwrt才有
# https://downloads.immortalwrt.org/releases/23.05-SNAPSHOT/targets/mediatek/filogic/kmods/5.15.147-1-5076d6219a0173b309b08fc372921a47/
# 这些高级货。

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  CONFIG: immortalwrt-mt798x.imagebuilder.config
  TZ: Asia/Shanghai
  
jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo apt update
        sudo apt install -y -qq ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
        bzip2 ccache clang clangd cmake cpio curl device-tree-compiler ecj fastjar flex gawk gettext gcc-multilib \
        g++-multilib git gperf haveged help2man intltool lib32gcc-s1 libc6-dev-i386 libelf-dev libglib2.0-dev \
        libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5 libncursesw5-dev libreadline-dev \
        libssl-dev libtool lld lldb lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python2.7 \
        python3 python3-pip python3-ply python-docutils qemu-utils re2c rsync scons squashfs-tools subversion swig \
        texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev  
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: clone repo
      working-directory: /workdir
      run: |
        git clone --depth=1 https://github.com/hanwckf/immortalwrt-mt798x.git
    
    - name: Set up Upterm
      if: github.event.inputs.ssh == 'true'
      id: upterm
      uses: lhotari/action-upterm@v1
      with:
        wait-timeout-minutes: 5
        # limit-access-to-actor: true
        # limit-access-to-users: seiry

    - name: Print SSH connection command
      if: github.event.inputs.ssh == 'true'
      run: |
        echo "SSH connection command: ${{ steps.upterm.outputs.ssh }}"
      
    - name: Copy config
      run: |
        [ -e $CONFIG ] && mv $CONFIG /workdir/immortalwrt-mt798x/.config

    - name: Add respositories
      working-directory: /workdir/immortalwrt-mt798x
      run: |
        cat <<EOT >> target/imagebuilder/files/repositories.conf
        src/gz immortalwrt_base https://mirrors.pku.edu.cn/immortalwrt/releases/21.02-SNAPSHOT/packages/aarch64_cortex-a53/base
        src/gz immortalwrt_luci https://mirrors.pku.edu.cn/immortalwrt/releases/21.02-SNAPSHOT/packages/aarch64_cortex-a53/luci
        src/gz immortalwrt_packages https://mirrors.pku.edu.cn/immortalwrt/releases/21.02-SNAPSHOT/packages/aarch64_cortex-a53/packages
        src/gz immortalwrt_routing https://mirrors.pku.edu.cn/immortalwrt/releases/21.02-SNAPSHOT/packages/aarch64_cortex-a53/routing
        src/gz immortalwrt_telephony https://mirrors.pku.edu.cn/immortalwrt/releases/21.02-SNAPSHOT/packages/aarch64_cortex-a53/telephony
        EOT
    # /Users/seiry/gitwork/immortalwrt-mt798x/target/imagebuilder/files/repositories.conf

    - name: Build
      working-directory: /workdir/immortalwrt-mt798x
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        make defconfig
        make download -j$(nproc)
        make -j$(nproc) || make -j1 V=s


    # - name: Set up Upterm
    #   id: upterm2
    #   uses: lhotari/action-upterm@v1
    #   with:
    #     wait-timeout-minutes: 500

    # - name: Print SSH connection command
    #   if: github.event.inputs.ssh == 'true'
    #   run: |
    #     echo "SSH connection command: ${{ steps.upterm2.outputs.ssh }}"
      
    - name: Organize files
      id: organize
      working-directory: /workdir/immortalwrt-mt798x
      run: |
        cd bin
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV


    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: firmware${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
